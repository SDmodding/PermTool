#pragma once

class CSceneryGroup : public CPerm
{
public:
	CSceneryGroup()
	{
		m_HasCtxOptions = true;
		m_HasTreeNodeItems = true;
	}

	bool OutputXML(const char* p_FilePath)
	{
		UFG::SceneryGroup_t* m_SceneryGroup = reinterpret_cast<UFG::SceneryGroup_t*>(GetResourceData());

		tinyxml2::XMLDocument m_XMLDoc;
		m_XMLDoc.InsertEndChild(m_XMLDoc.NewComment(Format::Get(" Generated by %s %s ", PROJECT_NAME, PROJECT_VERSION)));
		m_XMLDoc.InsertEndChild(m_XMLDoc.NewDeclaration());

		// SceneryGroup (Root)
		tinyxml2::XMLElement* m_XMLSceneryGroup = m_XMLDoc.NewElement("SceneryGroup");
		{
			m_XMLSceneryGroup->SetAttribute("Name", this->GetResoruceName());
			m_XMLSceneryGroup->SetAttribute("UID", Format::GetUIntHex(m_SceneryGroup->m_NameUID));
			m_XMLSceneryGroup->SetAttribute("CellIndex", Format::GetUInt16(m_SceneryGroup->m_SectionCellIndex));
			m_XMLSceneryGroup->SetAttribute("VisIndex", Format::GetUInt16(m_SceneryGroup->m_SectionVisIndex));
			m_XMLSceneryGroup->SetAttribute("Flags", Format::GetUIntHex(static_cast<uint32_t>(m_SceneryGroup->m_Flags)));

			tinyxml2::XMLElement* m_AABBMin = m_XMLDoc.NewElement("Min");
			m_AABBMin->SetText(Format::Get("%.3f, %.3f, %.3f", m_SceneryGroup->m_AABBMin[0], m_SceneryGroup->m_AABBMin[1], m_SceneryGroup->m_AABBMin[2]));
			m_XMLSceneryGroup->InsertEndChild(m_AABBMin);

			tinyxml2::XMLElement* m_AABBMax = m_XMLDoc.NewElement("Max");
			m_AABBMax->SetText(Format::Get("%.3f, %.3f, %.3f", m_SceneryGroup->m_AABBMax[0], m_SceneryGroup->m_AABBMax[1], m_SceneryGroup->m_AABBMax[2]));
			m_XMLSceneryGroup->InsertEndChild(m_AABBMax);
		}
		m_XMLDoc.InsertEndChild(m_XMLSceneryGroup);

		// Objects
		tinyxml2::XMLElement* m_XMLSceneryObjects = m_XMLDoc.NewElement("Objects");
		m_XMLSceneryGroup->InsertEndChild(m_XMLSceneryObjects);

		UFG::SceneryInstance_t* m_SceneryInstances = m_SceneryGroup->GetSceneryInstances();
		for (uint16_t i = 0; m_SceneryGroup->m_NumInstances > i; ++i)
		{
			UFG::SceneryInstance_t* m_SceneryInstance = &m_SceneryInstances[i];
			UFG::SceneryObject_t* m_SceneryObject = m_SceneryInstance->GetSceneryObject();
			if (!m_SceneryObject)
				continue;

			tinyxml2::XMLElement* m_XMLObject = m_XMLDoc.NewElement("Object");
			{
				m_XMLObject->SetAttribute("Name", m_SceneryObject->m_Name);
				m_XMLObject->SetAttribute("UID", Format::GetUIntHex(m_SceneryObject->m_NameUID));
				m_XMLObject->SetAttribute("TintIndex", Format::GetInt16(m_SceneryInstance->m_TintIndex));
			}
			m_XMLSceneryObjects->InsertEndChild(m_XMLObject);

			for (auto& m_ModelHandle : m_SceneryObject->m_ModelHandles)
			{
				if (m_ModelHandle.m_NameUID == 0x0 || m_ModelHandle.m_NameUID == UINT32_MAX)
					continue;

				CResourceData* m_ModelData = Core_FindResourceByName(m_ModelHandle.m_NameUID);

				tinyxml2::XMLElement* m_XMLModel = m_XMLDoc.NewElement("Model");
				{
					if (m_ModelData)
						m_XMLModel->SetAttribute("Name", m_ModelData->GetName());

					m_XMLModel->SetAttribute("UID", Format::GetUIntHex(m_ModelHandle.m_NameUID));

					m_XMLModel->SetAttribute("Local", (m_ModelData ? true : false));
				}
				m_XMLObject->InsertEndChild(m_XMLModel);
			}
			
			tinyxml2::XMLElement* m_XMLMatrix = m_XMLDoc.NewElement("Matrix");
			m_XMLObject->InsertEndChild(m_XMLMatrix);
			{
				const char* m_MatrixFormat = "%.5f, %.5f, %.5f, %.5f";
				
				float m_WorldMatrix[16];
				{
					memcpy(m_WorldMatrix, m_SceneryInstance->m_LocalWorldMatrix, sizeof(UFG::SceneryInstance_t::m_LocalWorldMatrix));
					for (float& m_Value : m_WorldMatrix)
					{
						if (1e-3f >= fabsf(m_Value))
							m_Value = 0.f;
					}
				}

				tinyxml2::XMLElement* m_MatrixForward = m_XMLDoc.NewElement("Forward");
				m_MatrixForward->SetText(Format::Get(m_MatrixFormat, m_WorldMatrix[0], m_WorldMatrix[1], m_WorldMatrix[2], m_WorldMatrix[3]));
				m_XMLMatrix->InsertEndChild(m_MatrixForward);

				tinyxml2::XMLElement* m_MatrixRight = m_XMLDoc.NewElement("Right");
				m_MatrixRight->SetText(Format::Get(m_MatrixFormat, m_WorldMatrix[4], m_WorldMatrix[5], m_WorldMatrix[6], m_WorldMatrix[7]));
				m_XMLMatrix->InsertEndChild(m_MatrixRight);

				tinyxml2::XMLElement* m_MatrixUp = m_XMLDoc.NewElement("Up");
				m_MatrixUp->SetText(Format::Get(m_MatrixFormat, m_WorldMatrix[8], m_WorldMatrix[9], m_WorldMatrix[10], m_WorldMatrix[11]));
				m_XMLMatrix->InsertEndChild(m_MatrixUp);

				tinyxml2::XMLElement* m_MatrixPosition = m_XMLDoc.NewElement("Position");
				m_MatrixPosition->SetText(Format::Get(m_MatrixFormat, m_WorldMatrix[12], m_WorldMatrix[13], m_WorldMatrix[14], m_WorldMatrix[15]));
				m_XMLMatrix->InsertEndChild(m_MatrixPosition);
			}
		}


		// ColourTints
		tinyxml2::XMLElement* m_XMLSceneryColour = m_XMLDoc.NewElement("Colours");
		m_XMLSceneryGroup->InsertEndChild(m_XMLSceneryColour);

		UFG::SceneryTintEntry_t* m_SceneryTintEntries = m_SceneryGroup->GetSceneryTintEntries();
		for (uint16_t i = 0; m_SceneryGroup->m_NumColours > i; ++i)
		{
			UFG::SceneryTintEntry_t* m_SceneryTintEntry = &m_SceneryTintEntries[i];

			tinyxml2::XMLElement* m_XMLTint = m_XMLDoc.NewElement("Tint");
			m_XMLTint->SetAttribute("Index", Format::GetUInt16(i));
			m_XMLSceneryColour->InsertEndChild(m_XMLTint);

			uint8_t m_Colour[4];
			
			tinyxml2::XMLElement* m_Value = m_XMLDoc.NewElement("Value");
			Core_ConvertFloat4Color2UInt(m_SceneryTintEntry->m_TintColour, m_Colour);
			m_Value->SetText(Format::Get("%d, %d, %d, %d", m_Colour[0], m_Colour[1], m_Colour[2], m_Colour[3]));
			m_XMLTint->InsertEndChild(m_Value);

			tinyxml2::XMLElement* m_SIValue = m_XMLDoc.NewElement("SIValue");
			Core_ConvertFloat4Color2UInt(m_SceneryTintEntry->m_SITintColour, m_Colour);
			m_SIValue->SetText(Format::Get("%d, %d, %d, %d", m_Colour[0], m_Colour[1], m_Colour[2], m_Colour[3]));
			m_XMLTint->InsertEndChild(m_SIValue);
		}

		return (m_XMLDoc.SaveFile(p_FilePath) == tinyxml2::XML_SUCCESS);
	}

	void ExportXML()
	{
		UFG::SceneryGroup_t* m_SceneryGroup = reinterpret_cast<UFG::SceneryGroup_t*>(GetResourceData());

		char m_FilePath[MAX_PATH];
		{
			ZeroMemory(m_FilePath, sizeof(m_FilePath));
			strncpy_s(m_FilePath, this->GetResoruceName(), sizeof(m_FilePath));
		}

		OPENFILENAMEA m_OpenFileName = { 0 };
		{
			ZeroMemory(&m_OpenFileName, sizeof(OPENFILENAMEA));
			m_OpenFileName.lStructSize = sizeof(OPENFILENAMEA);
			m_OpenFileName.lpstrFile = m_FilePath;
			m_OpenFileName.nMaxFile = sizeof(m_FilePath);
			m_OpenFileName.lpstrFilter = "(XML File)\0*.xml\0";
			m_OpenFileName.Flags = (OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST);
			m_OpenFileName.hwndOwner = g_Window;
			m_OpenFileName.lpstrTitle = "Export SceneryGroup as XML";
		}
		if (GetSaveFileNameA(&m_OpenFileName) == 0)
			return;

		std::string m_XMLPath = m_FilePath;
		if (m_XMLPath.find(".xml") == std::string::npos)
			m_XMLPath += ".xml";

		OutputXML(&m_XMLPath[0]);
	}

	void RenderCtxOptions()
	{

		if (ImGui::MenuItem(u8"\uF56E Export as XML File"))
			ExportXML();
	}

	void RenderTreeNode()
	{
		UFG::SceneryGroup_t* m_SceneryGroup = reinterpret_cast<UFG::SceneryGroup_t*>(GetResourceData());

		Core_ImGui_TextSuffix("Min", Format::Get("%.5f, %.5f, %.5f", m_SceneryGroup->m_AABBMin[0], m_SceneryGroup->m_AABBMin[1], m_SceneryGroup->m_AABBMin[2]));
		Core_ImGui_TextSuffix("Max", Format::Get("%.5f, %.5f, %.5f", m_SceneryGroup->m_AABBMax[0], m_SceneryGroup->m_AABBMax[1], m_SceneryGroup->m_AABBMax[2]));

		Core_ImGui_TextSuffix("Cell Index", Format::GetUInt16(m_SceneryGroup->m_SectionCellIndex));
		Core_ImGui_TextSuffix("Vis Index", Format::GetUInt16(m_SceneryGroup->m_SectionVisIndex));
		Core_ImGui_TextSuffix("Num Colours", Format::GetUInt16(m_SceneryGroup->m_NumColours));
		Core_ImGui_TextSuffix("Num Instances", Format::GetUInt16(m_SceneryGroup->m_NumInstances));
		Core_ImGui_TextSuffix("Num Objects", Format::GetUInt16(m_SceneryGroup->m_NumObjects));
		Core_ImGui_TextSuffix("Num Occluders", Format::GetUInt16(m_SceneryGroup->m_NumOccluders));

		if (m_SceneryGroup->m_NumObjects && ImGui::TreeNodeEx(Format::Get(u8"\uF1B2 Objects (Count: %u)", m_SceneryGroup->m_NumObjects), IMGUI_TREENODE_FLAGS))
		{
			UFG::SceneryInstance_t* m_SceneryInstances = m_SceneryGroup->GetSceneryInstances();
			for (uint16_t i = 0; m_SceneryGroup->m_NumInstances > i; ++i)
			{
				UFG::SceneryInstance_t* m_SceneryInstance = &m_SceneryInstances[i];
				UFG::SceneryObject_t* m_SceneryObject = m_SceneryInstance->GetSceneryObject();
				if (!m_SceneryObject)
					continue;

				if (ImGui::TreeNodeEx(Format::Get("%s##%hu", m_SceneryObject->m_Name, i), IMGUI_TREENODE_FLAGS))
				{
					Core_ImGui_TextSuffix("TintIndex", Format::GetUInt16(m_SceneryInstance->m_TintIndex));

					for (int m = 0; 2 > m; ++m)
					{
						auto& m_ModelHandle = m_SceneryObject->m_ModelHandles[m];
						if (m_ModelHandle.m_NameUID == 0x0 || m_ModelHandle.m_NameUID == UINT32_MAX)
							continue;

						Core_ImGui_ResourceHandleSelectable(Format::Get("Model[%d]", m), m_ModelHandle.m_NameUID);
					}

					ImGui::Text("Matrix:");
					if (ImGui::BeginTable("##MatrixTable", 4, ImGuiTableFlags_Borders))
					{
						ImGui::TableSetupColumn("X");
						ImGui::TableSetupColumn("Y");
						ImGui::TableSetupColumn("Z");
						ImGui::TableSetupColumn("W");
						ImGui::TableHeadersRow();

						for (int x = 0; 4 > x; ++x)
						{
							ImGui::TableNextRow();
							for (int y = 0; 4 > y; ++y)
							{
								ImGui::TableSetColumnIndex(y);
								ImGui::Text("%.3f", m_SceneryInstance->m_LocalWorldMatrix[x][y]);
							}
						}
						ImGui::EndTable();
					}

					ImGui::TreePop();
				}
			}

			ImGui::TreePop();
		}

		if (m_SceneryGroup->m_NumColours && ImGui::TreeNodeEx(Format::Get(u8"\uF043 Colours (Count: %u)", m_SceneryGroup->m_NumColours), IMGUI_TREENODE_FLAGS))
		{
			UFG::SceneryTintEntry_t* m_SceneryTintEntries = m_SceneryGroup->GetSceneryTintEntries();
			for (uint16_t i = 0; m_SceneryGroup->m_NumColours > i; ++i)
			{
				UFG::SceneryTintEntry_t* m_SceneryTintEntry = &m_SceneryTintEntries[i];

				if (ImGui::TreeNodeEx(Format::GetUInt16(i), IMGUI_TREENODE_OPEN_FLAGS))
				{
					Core_ImGui_ColorInfo(Format::Get("Value##%hu", i), m_SceneryTintEntry->m_TintColour);
					Core_ImGui_ColorInfo(Format::Get("SIValue##%hu", i), m_SceneryTintEntry->m_SITintColour);

					ImGui::TreePop();
				}
			}

			ImGui::TreePop();
		}
	}
};